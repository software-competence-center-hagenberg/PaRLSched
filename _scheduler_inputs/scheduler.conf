#PARLSCHED (boolean variable that initiates RL mapping)
1
#MAX_NUMBER_MAIN_RESOURCES (number of NUMA nodes)
2
#MAX_NUMBER_CHILD_RESOURCES NUMA 0 (number of CPU nodes)
6
#MAX_NUMBER_CHILD_RESOURCES NUMA 1 (number of CPU nodes)
0
#SCHED_PERIOD (period for allocating the CPU nodes)
0.025
#OPTIMIZING_MAIN_RESOURCE (optimizing with respect to the NUMA nodes)
0
#MAIN_RESOURCE_SCHED_PERIOD (this is the period for deciding the allocation over the NUMA nodes) - product of SCHED_PERIOD
40
#ZETA (percentage, if 0.5 over 1/2 of the threads have to be running on the new NUMA node destination before binding the (stack) memory of a thread to it)
0.5
#NUMA_SWITCH_THRESHOLD (percentage of the performance drop after which switching of the NUMA node is allowed)
0.9
#STEP_SIZE_RL (step-size constant of the RL algorithm for allocating threads to CPUs)
0.05
#STEP_SIZE_AL (step-size constant of the AL algorithm for allocating threads to NUMA nodes)
0.05
#UTILITY_NORMALIZATION (constant for normalizing the utility measurements for use in the RL algorithm)
10000000
#LAMBDA_RL (mutation parameter for RL algorithm for allocating threads to CPU nodes)
0.02
#LAMBDA_AL (mutation parameter for AL algorithm for allocating threads to NUMA nodes)
0.02
#GAMMA (constant for penalizing deviation of utilities between threads)
0
#ACTIVE RESHUFFLING (reshuffling the strategies of the active threads when one or more threads become inactive)
1
#PERFORMACE_RESHUFFLING (reshuffling the strategies of a thread when its performance significantly drops)
0
#PRINTOUT_STRATEGIES (print the strategies of the threads)
0
#PRINTOUT_ACTIONS (print the actions of the threads)
1
#WRITE_TO_FILES (write to files)
1
#WRITE_TO_FILES_DETAILS (write all details to files)
0
#PR_MAPPING (using a predefined mapping)
0
#ST_MAPPING (allocating memory when moving a thread to a different NUMA node)
0
#NEIGHBORHOOD_SIZE (creating groups of CPUs and allocating threads into groups)
2
#SUSPEND_THREADS (suspending threads before allocating them)
0
#FACTOR_H (this factor is used in the aspiration-based reinforcement learning for allocating threads to CPUs)
1
