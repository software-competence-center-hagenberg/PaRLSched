<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="ThreadSuspendControl_8h" kind="file">
    <compoundname>ThreadSuspendControl.h</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">pthread.h</includes>
    <includes local="no">signal.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">unistd.h</includes>
    <includedby refid="Scheduler_8cpp" local="yes">Scheduler.cpp</includedby>
    <incdepgraph>
      <node id="174">
        <label>stdlib.h</label>
      </node>
      <node id="169">
        <label>ThreadSuspendControl.h</label>
        <link refid="ThreadSuspendControl.h"/>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
      </node>
      <node id="171">
        <label>pthread.h</label>
      </node>
      <node id="175">
        <label>unistd.h</label>
      </node>
      <node id="172">
        <label>signal.h</label>
      </node>
      <node id="170">
        <label>iostream</label>
      </node>
      <node id="173">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="177">
        <label>Scheduler.cpp</label>
        <link refid="Scheduler_8cpp_source"/>
      </node>
      <node id="176">
        <label>ThreadSuspendControl.h</label>
        <link refid="ThreadSuspendControl.h"/>
        <childnode refid="177" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="ThreadSuspendControl_8h_1a64414aad16d7f08a91d58324f16e380b" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>volatile int sentinel</definition>
        <argsstring></argsstring>
        <name>sentinel</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" line="42" column="1" bodyfile="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ThreadSuspendControl_8h_1ad2c7a51be06d10615c8b5ab3d2f8d161" prot="public" static="no" mutable="no">
        <type>pthread_once_t</type>
        <definition>pthread_once_t once</definition>
        <argsstring></argsstring>
        <name>once</name>
        <initializer>= PTHREAD_ONCE_INIT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" line="43" column="1" bodyfile="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ThreadSuspendControl_8h_1aea3888b7aae8890c7809772b3a0d74ed" prot="public" static="no" mutable="no">
        <type>pthread_t *</type>
        <definition>pthread_t* array</definition>
        <argsstring></argsstring>
        <name>array</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" line="44" column="1" bodyfile="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ThreadSuspendControl_8h_1a740efcb334b5388390cc2da45a56871e" prot="public" static="no" mutable="no">
        <type>pthread_t</type>
        <definition>pthread_t null_pthread</definition>
        <argsstring></argsstring>
        <name>null_pthread</name>
        <initializer>= {0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" line="45" column="1" bodyfile="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ThreadSuspendControl_8h_1ac947d0a92b283d8b2dd4f964b6457e42" prot="public" static="no" mutable="no">
        <type>pthread_mutex_t</type>
        <definition>pthread_mutex_t the_mutex</definition>
        <argsstring></argsstring>
        <name>the_mutex</name>
        <initializer>= PTHREAD_MUTEX_INITIALIZER</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" line="47" column="1" bodyfile="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ThreadSuspendControl_8h_1a61d8a205b71d88c28835fa36cfb254ac" prot="public" static="no" mutable="no">
        <type>pthread_mutex_t</type>
        <definition>pthread_mutex_t mut</definition>
        <argsstring></argsstring>
        <name>mut</name>
        <initializer>= PTHREAD_MUTEX_INITIALIZER</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" line="48" column="1" bodyfile="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ThreadSuspendControl_8h_1a323a7064fba6e15e3e542e34fb19764e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int bottom</definition>
        <argsstring></argsstring>
        <name>bottom</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" line="50" column="1" bodyfile="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ThreadSuspendControl_8h_1aaddb9c6e1342c98b318859f62e72e9ec" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int inited</definition>
        <argsstring></argsstring>
        <name>inited</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" line="51" column="1" bodyfile="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ThreadSuspendControl_8h_1af829ca27c90a0222a026077920fd0fb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void suspend_signal_handler</definition>
        <argsstring>(int sig)</argsstring>
        <name>suspend_signal_handler</name>
        <param>
          <type>int</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>temporarily replaces the signal mask with the mask &quot;signal_set&quot; and then suspends the process until delivery of a signal whose action is to invoke a signal handler or to terminate a process.</para>        </inbodydescription>
        <location file="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" line="57" column="1" bodyfile="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" bodystart="57" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="ThreadSuspendControl_8h_1aee44873512307054276a6f9a2938a53b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void resume_signal_handler</definition>
        <argsstring>(int sig)</argsstring>
        <name>resume_signal_handler</name>
        <param>
          <type>int</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" line="86" column="1" bodyfile="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="ThreadSuspendControl_8h_1a9b9fecd114e3bdd1704452784d74ba86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void suspend_init_routine</definition>
        <argsstring>(void)</argsstring>
        <name>suspend_init_routine</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" line="95" column="1" bodyfile="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" bodystart="95" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="ThreadSuspendControl_8h_1a649510f12574ac6583bf701ccda891df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int thd_suspend</definition>
        <argsstring>(pthread_t target_thread)</argsstring>
        <name>thd_suspend</name>
        <param>
          <type>pthread_t</type>
          <declname>target_thread</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" line="139" column="1" bodyfile="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" bodystart="139" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="ThreadSuspendControl_8h_1a9f7013d6f3ed5cf5df44994c015e8114" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int thd_continue</definition>
        <argsstring>(pthread_t target_thread)</argsstring>
        <name>thd_continue</name>
        <param>
          <type>pthread_t</type>
          <declname>target_thread</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" line="223" column="1" bodyfile="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h" bodystart="223" bodyend="271"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2012-2014<sp/>Software<sp/>Competence<sp/>Center<sp/>Hagenberg<sp/>GmbH<sp/>(SCCH)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>&lt;georgios.chasparis@scch.at&gt;,<sp/>&lt;office@scch.at&gt;</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>This<sp/>code<sp/>is<sp/>subject<sp/>to<sp/>dual-licensing.<sp/>Please<sp/>contact<sp/>office@scch.at</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>if<sp/>you<sp/>are<sp/>interested<sp/>in<sp/>obtaining<sp/>a<sp/>differently<sp/>licensed<sp/>version.</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ThreadSuspendControl.h</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>May<sp/>2,<sp/>2016</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>chasparis</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>Description:<sp/>This<sp/>library<sp/>collects<sp/>functions<sp/>with<sp/>respect<sp/>to<sp/>&apos;suspending&apos;<sp/>a<sp/>thread.<sp/>Currently<sp/>is<sp/>not<sp/>being<sp/>used<sp/>by<sp/>the<sp/>scheduler.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>library<sp/>can<sp/>be<sp/>found<sp/>under<sp/>boinc.berkley.edu</highlight></codeline>
<codeline lineno="29"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SRC_THREADSUSPENDCONTROL_H_</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SRC_THREADSUSPENDCONTROL_H_</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>printf,<sp/>scanf,<sp/>puts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>realloc,<sp/>free,<sp/>exit,<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sentinel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">pthread_once_t<sp/>once<sp/>=<sp/>PTHREAD_ONCE_INIT;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">pthread_t*<sp/>array<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">pthread_t<sp/>null_pthread<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">pthread_mutex_t<sp/>the_mutex<sp/>=<sp/>PTHREAD_MUTEX_INITIALIZER;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">pthread_mutex_t<sp/>mut<sp/>=<sp/>PTHREAD_MUTEX_INITIALIZER;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bottom<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inited<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="54"><highlight class="comment">*<sp/>Handle<sp/>SIGUSR1<sp/>in<sp/>the<sp/>target<sp/>thread,<sp/>to<sp/>suspend<sp/>it<sp/>until</highlight></codeline>
<codeline lineno="55"><highlight class="comment">*<sp/>receiving<sp/>SIGUSR2<sp/>(resume).</highlight></codeline>
<codeline lineno="56"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>suspend_signal_handler<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>sigset_t<sp/>signal_set;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Block<sp/>all<sp/>signals<sp/>except<sp/>SIGUSR2<sp/>while<sp/>suspended.</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>sigfillset(&amp;signal_set);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>sigdelset(&amp;signal_set,<sp/>SIGUSR2);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>sentinel<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>sigsuspend(&amp;signal_set);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Once<sp/>I&apos;m<sp/>here,<sp/>I&apos;ve<sp/>been<sp/>resumed,<sp/>and<sp/>the<sp/>resume<sp/>signal</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>handler<sp/>has<sp/>been<sp/>run<sp/>to<sp/>completion.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="82"><highlight class="comment">*<sp/>Handle<sp/>SIGUSR2<sp/>in<sp/>the<sp/>target<sp/>thread,<sp/>to<sp/>resume<sp/>it.<sp/>Note<sp/>that</highlight></codeline>
<codeline lineno="83"><highlight class="comment">*<sp/>the<sp/>signal<sp/>handler<sp/>does<sp/>nothing.<sp/>It<sp/>exists<sp/>only<sp/>because<sp/>we<sp/>need</highlight></codeline>
<codeline lineno="84"><highlight class="comment">*<sp/>to<sp/>cause<sp/>sigsuspend()<sp/>to<sp/>return.</highlight></codeline>
<codeline lineno="85"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resume_signal_handler<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig)</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="92"><highlight class="comment">*<sp/>Dynamically<sp/>initialize<sp/>the<sp/>&quot;suspend<sp/>package&quot;<sp/>when<sp/>first<sp/>used</highlight></codeline>
<codeline lineno="93"><highlight class="comment">*<sp/>(called<sp/>by<sp/>pthread_once).</highlight></codeline>
<codeline lineno="94"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>suspend_init_routine<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>sigusr1,<sp/>sigusr2;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Allocate<sp/>the<sp/>suspended<sp/>threads<sp/>array.<sp/>This<sp/>array<sp/>is<sp/>used</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>to<sp/>guarentee<sp/>idempotency</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>bottom<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>array<sp/>=<sp/>(pthread_t*)<sp/>calloc<sp/>(bottom,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(pthread_t));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Install<sp/>the<sp/>signal<sp/>handlers<sp/>for<sp/>suspend/resume.</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>sigusr1.sa_flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>sigusr1.sa_handler<sp/>=<sp/>suspend_signal_handler;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>sigemptyset<sp/>(&amp;sigusr1.sa_mask);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>sigusr2.sa_flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>sigusr2.sa_handler<sp/>=<sp/>resume_signal_handler;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>sigusr2.sa_mask<sp/>=<sp/>sigusr1.sa_mask;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>sigaction<sp/>(SIGUSR1,<sp/>&amp;sigusr1,<sp/>NULL);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//errno_abort<sp/>(&quot;Installing<sp/>suspend<sp/>handler&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Installing<sp/>suspend<sp/>handler&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>sigaction<sp/>(SIGUSR2,<sp/>&amp;sigusr2,<sp/>NULL);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//errno_abort<sp/>(&quot;Installing<sp/>resume<sp/>handler&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Installing<sp/>resume<sp/>handler&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>inited<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="132"><highlight class="comment">*<sp/>Suspend<sp/>a<sp/>thread<sp/>by<sp/>sending<sp/>it<sp/>a<sp/>signal<sp/>(SIGUSR1),<sp/>which<sp/>will</highlight></codeline>
<codeline lineno="133"><highlight class="comment">*<sp/>block<sp/>the<sp/>thread<sp/>until<sp/>another<sp/>signal<sp/>(SIGUSR2)<sp/>arrives.</highlight></codeline>
<codeline lineno="134"><highlight class="comment">*</highlight></codeline>
<codeline lineno="135"><highlight class="comment">*<sp/>Multiple<sp/>calls<sp/>to<sp/>thd_suspend<sp/>for<sp/>a<sp/>single<sp/>thread<sp/>have<sp/>no</highlight></codeline>
<codeline lineno="136"><highlight class="comment">*<sp/>additional<sp/>effect<sp/>on<sp/>the<sp/>thread<sp/>--<sp/>a<sp/>single<sp/>thd_continue</highlight></codeline>
<codeline lineno="137"><highlight class="comment">*<sp/>call<sp/>will<sp/>cause<sp/>it<sp/>to<sp/>resume<sp/>execution.</highlight></codeline>
<codeline lineno="138"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thd_suspend<sp/>(pthread_t<sp/>target_thread)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>first<sp/>call<sp/>to<sp/>thd_suspend<sp/>will<sp/>initialize<sp/>the</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>package.</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>pthread_once(&amp;once,<sp/>suspend_init_routine);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Serialize<sp/>access<sp/>to<sp/>suspend,<sp/>makes<sp/>life<sp/>easier</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>pthread_mutex_lock<sp/>(&amp;mut);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Threads<sp/>that<sp/>are<sp/>suspended<sp/>are<sp/>added<sp/>to<sp/>the<sp/>target_array;</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>request<sp/>to<sp/>suspend<sp/>a<sp/>thread<sp/>already<sp/>listed<sp/>in<sp/>the<sp/>array</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>is<sp/>ignored.<sp/>Sending<sp/>a<sp/>second<sp/>SIGUSR1<sp/>would<sp/>cause<sp/>the</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>thread<sp/>to<sp/>re-suspend<sp/>itself<sp/>as<sp/>soon<sp/>as<sp/>it<sp/>is<sp/>resumed.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>bottom)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array[i++]<sp/>==<sp/>target_thread)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>pthread_mutex_unlock(&amp;mut);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Ok,<sp/>we<sp/>really<sp/>need<sp/>to<sp/>suspend<sp/>this<sp/>thread.<sp/>So,<sp/>lets<sp/>find</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>location<sp/>in<sp/>the<sp/>array<sp/>that<sp/>we&apos;ll<sp/>use.<sp/>If<sp/>we<sp/>run<sp/>off</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>end,<sp/>realloc<sp/>the<sp/>array<sp/>for<sp/>more<sp/>space.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(array[i]<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>bottom)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array<sp/>=<sp/>(pthread_t*)<sp/>realloc<sp/>(array,<sp/>(++bottom<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(pthread_t)));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;mut);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>errno;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array[bottom]<sp/>=<sp/>null_pthread;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>new<sp/>entry<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Clear<sp/>the<sp/>sentinel<sp/>and<sp/>signal<sp/>the<sp/>thread<sp/>to<sp/>suspend.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>sentinel<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>pthread_kill<sp/>(target_thread,<sp/>SIGUSR1);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;mut);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Wait<sp/>for<sp/>the<sp/>sentinel<sp/>to<sp/>change.</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sentinel<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sched_yield<sp/>();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>array[i]<sp/>=<sp/>target_thread;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>pthread_mutex_unlock<sp/>(&amp;mut);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="219"><highlight class="comment">*<sp/>Resume<sp/>a<sp/>suspended<sp/>thread<sp/>by<sp/>sending<sp/>it<sp/>SIGUSR2<sp/>to<sp/>break</highlight></codeline>
<codeline lineno="220"><highlight class="comment">*<sp/>it<sp/>out<sp/>of<sp/>the<sp/>sigsuspend()<sp/>in<sp/>which<sp/>it&apos;s<sp/>waiting.<sp/>If<sp/>the</highlight></codeline>
<codeline lineno="221"><highlight class="comment">*<sp/>target<sp/>thread<sp/>isn&apos;t<sp/>suspended,<sp/>return<sp/>with<sp/>success.</highlight></codeline>
<codeline lineno="222"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thd_continue<sp/>(pthread_t<sp/>target_thread)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Serialize<sp/>access<sp/>to<sp/>suspend,<sp/>makes<sp/>life<sp/>easier</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>pthread_mutex_lock<sp/>(&amp;mut);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>we<sp/>haven&apos;t<sp/>been<sp/>initialized,<sp/>then<sp/>the<sp/>thread<sp/>must<sp/>be<sp/>&quot;resumed&quot;</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>it<sp/>couldn&apos;t<sp/>have<sp/>been<sp/>suspended!</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inited)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>pthread_mutex_unlock<sp/>(&amp;mut);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Make<sp/>sure<sp/>the<sp/>thread<sp/>is<sp/>in<sp/>the<sp/>suspend<sp/>array.<sp/>If<sp/>not,<sp/>it</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>hasn&apos;t<sp/>been<sp/>suspended<sp/>(or<sp/>it<sp/>has<sp/>already<sp/>been<sp/>resumed)<sp/>and</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>we<sp/>can<sp/>just<sp/>carry<sp/>on.</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(array[i]<sp/>!=<sp/>target_thread<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>bottom)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>bottom)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;mut);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Signal<sp/>the<sp/>thread<sp/>to<sp/>continue,<sp/>and<sp/>remove<sp/>the<sp/>thread<sp/>from</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>suspended<sp/>array.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>pthread_kill<sp/>(target_thread,<sp/>SIGUSR2);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;mut);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>array[i]<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>array<sp/>element<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>pthread_mutex_unlock<sp/>(&amp;mut);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SRC_THREADSUSPENDCONTROL_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/chasparis/Documents/RePhrase_git/RePhrase_new/PaRLSched/ThreadSuspendControl.h"/>
  </compounddef>
</doxygen>
